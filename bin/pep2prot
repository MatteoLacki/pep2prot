#!/usr/bin/env python3
import argparse
import pandas as pd
from   pathlib import Path

from pep2prot.analyse import isoquant_peptide_report

debug = False

parser = argparse.ArgumentParser(description='Turn an IsoQuant peptide report into a protein report. Like a BONZO.')
parser.add_argument("pep_rep_path", type=str, help="Path to a peptide report.")
parser.add_argument("fasta_path", type=str, help="Path to corresponding fasta file.")
parser.add_argument("-o", "--output", type=str, help="Path to a custom folder for output.", default='.')
parser.add_argument("--min_pepNo_per_prot", type=int, help="The The minimum number of peptides per proteins.", default=2)
parser.add_argument("--min_cover_max_iter", type=int, help="The maximum number of iterations for the minimum cover calculator (by default unconstrained).", default=float('inf'))
parser.add_argument("--excel",action='store_const', const=True, default=False,
                    help="Return two csvs instead of one excel report.")
parser.add_argument("--silent", action='store_const', const=True, default=False,
                    help="No output to console.")

args = parser.parse_args()
if debug:
    print(args.__dict__)

fasta_path   = Path(args.fasta_path).expanduser()
pep_rep_path = Path(args.pep_rep_path).expanduser()
if 'fas' not in fasta_path.suffix:
    fasta_path, pep_rep_path = pep_rep_path, fasta_path

output_path = args.output
if output_path == '.':
    output_path = pep_rep_path.parent
else:
    output_path = Path(output_path).expanduser()
    output_path.mkdir(parents=True, exist_ok=True)

# min_cover_max_iter = args.min_cover_max_iter if args.min_cover_max_iter != -1 else float('inf')

if not args.silent:
    print('Welcome weary scientist!')
    print('Relax, as we do the job for you.')
    print()

prots_I_nice, all_prots_nice = isoquant_peptide_report(pep_rep_path,
                                                       fasta_path,
                                                       args.min_pepNo_per_prot,
                                                       args.min_cover_max_iter,
                                                       not args.silent)

if args.excel:
    with pd.ExcelWriter(output_path/"protein_report.xlsx") as writer:
        prots_I_nice.to_excel(writer, sheet_name='report')
        all_prots_nice.to_excel(writer, sheet_name='extended report')    
else:
    prots_I_nice.to_csv(output_path/"protein_report.csv", sep=';')
    all_prots_nice.to_csv(output_path/"protein_report_full.csv", sep=';')

if not args.silent:
    print()
    print("It worked! Or at least so it would seem.")